package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Ball;

public class BallManagerJDBC implements BallManager{

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableBall = "CREATE TABLE Ball(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yearOfProduction integer, price double)";

	private PreparedStatement addBallStmt;
	private PreparedStatement deleteAllBallsStmt;
	private PreparedStatement getAllBallsStmt;

	private Statement statement;

	public BallManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Ball".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableBall);

			addBallStmt = connection
					.prepareStatement("INSERT INTO Ball (name, yearOfProduction, price ) VALUES (?, ?, ?)");
			deleteAllBallsStmt = connection
					.prepareStatement("DELETE FROM Ball");
			getAllBallsStmt = connection
					.prepareStatement("SELECT id, name, yearOfProduction, price FROM Ball");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearBalls() {
		try {
			deleteAllBallsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addBall(Ball ball) {
		int count = 0;
		try {
			addBallStmt.setString(1, ball.getName());
			addBallStmt.setInt(2, ball.getYearOfProduction());
			addBallStmt.setDouble(3, ball.getPrice());

			count = addBallStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<Ball> getAllBalls() {
		List<Ball> balls = new ArrayList<Ball>();

		try {
			ResultSet rs = getAllBallsStmt.executeQuery();

			while (rs.next()) {
				Ball b = new Ball();
				b.setId(rs.getInt("id"));
				b.setName(rs.getString("name"));
				b.setYearOfProduction(rs.getInt("yearOfProduction"));
				b.setPrice(rs.getDouble("price"));
				balls.add(b);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return balls;
	}

	public void addAllBalls(List<Ball> balls) {
		try{
			connection.setAutoCommit(false);
			for(Ball ball : balls) {
				addBallStmt.setString(1, ball.getName());
				addBallStmt.setInt(2, ball.getYearOfProduction());
				addBallStmt.setDouble(3, ball.getPrice());
				addBallStmt.executeUpdate();				
			}
			connection.commit();
			
		} catch (SQLException exception){
			try {
				connection.rollback();
			} catch (SQLException e){
				e.printStackTrace();
				//!!!! KEK
			}
		}
		
	}

}
